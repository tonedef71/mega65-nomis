'------------------------------------------------------------------------------'- nOMIS oNLY mAY iMPERSONATE sIMON'------------------------------------------------------------------------------' tHIS eLEVEN SOURCE FILE MAY BE USED TO GENERATE A TOKENIZED basic 65 prg' FILE BY LOADING AND COMPILING WITHIN THE eLEVEN DEVELOPMENT ENVIRONMENT.' tHE RESULTING prg FILE SHOULD BE COPIED TO THE RELEASE DISK.'------------------------------------------------------------------------------#OUTPUT "NOMIS"                ' OUTPUT FILE NAME' ENTRY POINTCLR:KEY OFF:MOUSE OFF' *** CONSTANTS ***#DECLARE MAXINT = $3B9AC9FF ' 999,999,999#DECLARE TRUE  = -1#DECLARE FALSE =  0#DECLARE BLACK = 0#DECLARE WHITE = 1#DECLARE RED = 2#DECLARE CYAN = 3#DECLARE MAGENTA = 4#DECLARE GREEN = 5#DECLARE BLUE = 6#DECLARE YELLOW = 7#DECLARE DARKGREY = 11#DECLARE BLANK = 32#DECLARE HASH = 35#DECLARE RBRACE = 93#DECLARE BLACK$BLACK$ = CHR$(144)#DECLARE WHITE$WHITE$ = CHR$(5)#DECLARE RED$RED$ = CHR$(28)#DECLARE CYAN$CYAN$ = CHR$(159)#DECLARE MAGENTA$MAGENTA$ = CHR$(156)#DECLARE GREEN$GREEN$ = CHR$(30)#DECLARE BLUE$BLUE$ = CHR$(31)#DECLARE YELLOW$YELLOW$ = CHR$(158)#DECLARE DARKGREY$DARKGREY$ = CHR$(151)#DECLARE ESC$ESC$ = CHR$(27)#DECLARE RVSON$RVSON$ = CHR$(18)#DECLARE RVSOFF$RVSOFF$ = CHR$(146)#DECLARE UPPERCASE$UPPERCASE$ = CHR$(142)' *** GLOBAL VARS ***#DECLARE GAMENAME$ = "NOMIS"#DECLARE MAXLEVEL% = 4#DECLARE BESTSCORE% = 6#DECLARE BESTROUNDS% = 8#DECLARE NUMPADS% = 4#DECLARE LIT$#DECLARE UNLIT$#DECLARE CURRENTROUND%#DECLARE NUMROUNDS%#DECLARE LOST%#DECLARE DIFFICULTYLEVEL%#DECLARE DIFFICULTY_LEVELS%#DECLARE SEQUENCE%(32)#DECLARE LIT_PAD$#DECLARE UNLIT_PAD$#DECLARE PAD%#DECLARE PAD_COLOR%#DECLARE PAD_PITCH$#DECLARE PAD_KEY$#DECLARE SW% ' GLOBAL SCREEN WIDTH#DECLARE SH% ' GLOBAL SCREEN HEIGHT#DECLARE PDLY = 3.5#DECLARE SDLY = .2' *** FUNCTION VARIABLES ***#DECLARE F0AT#DECLARE F0CH$#DECLARE F0DURATION#DECLARE F0RV%#DECLARE F1RV%#DECLARE F2HI%#DECLARE F2LO%#DECLARE F2RV%#DECLARE F3RV#DECLARE F3X#DECLARE F3Y #DECLARE F4RV#DECLARE F4X#DECLARE F4Y#DECLARE F5RV#DECLARE F6PREVSEC%#DECLARE F6RV%#DECLARE F6SEC%#DECLARE F6TARGETSEC%#DECLARE F7COUNT% ' COUNT% = NUM OF CHARACTERS#DECLARE F7INDEX% ' LOCAL INDEX%#DECLARE F7RV$ ' RETURN VALUE AS STRING#DECLARE F7TEXT$ ' TEXT$ = TEXT TO REPEAT#DECLARE F9RV% #DECLARE F9TEXT$#DECLARE F10DEFAULT$#DECLARE F10RV$#DECLARE F10TEXT$#DECLARE F10X%#DECLARE F10Y%#DECLARE F11C$#DECLARE F11DEFAULT$#DECLARE F11LENGTH%#DECLARE F11RV$#DECLARE F11TEXT$#DECLARE F11X%#DECLARE F11Y%#DECLARE F12CHARS$ = "NY"#DECLARE F12KEY$#DECLARE F12RV%' RETURN INT VALUE (TRUE OR FALSE)#DECLARE F12TEXT$ ' PROMPT TEXT#DECLARE F12X% ' X-POSITION#DECLARE F12Y% ' Y-POSITION' *** PROCEDURE VARIABLES ***#DECLARE P0I% ' LOCAL I%#DECLARE P0J% ' LOCAL J%#DECLARE P0N% ' LOCAL N%#DECLARE P2DELAYTIME% ' LOCAL DELAYTIME%#DECLARE P2I% ' LOCAL I%#DECLARE P2INDEX% ' LOCAL INDEX%#DECLARE P2N% ' LOCAL N%#DECLARE P2WON% ' LOCAL WON%#DECLARE P3I%#DECLARE P4I%#DECLARE P4OX%#DECLARE P4OY%#DECLARE P5FGCOLOR#DECLARE P5I%#DECLARE P5INDEX%#DECLARE P5IS_LIT%#DECLARE P5OX%#DECLARE P5OY%#DECLARE P5P$#DECLARE P5PAUSE ' SECONDS TO PAUSE#DECLARE P5X%#DECLARE P5Y%#DECLARE P6DUMMY$#DECLARE P6DURATION#DECLARE P6INDEX%#DECLARE P6P$#DECLARE P7RV$#DECLARE P7RV%#DECLARE P7TEXT$#DECLARE P7X%#DECLARE P7Y%#DECLARE P8SC$#DECLARE P9HS$#DECLARE P10STATUS%#DECLARE P10VAL1%#DECLARE P10VAL2%#DECLARE P12FG%#DECLARE P13I%#DECLARE P13C%#DECLARE P13PAD$#DECLARE P14CO%#DECLARE P14MSG$#DECLARE P15I%#DECLARE P19A%#DECLARE P20CH%#DECLARE P20CH$#DECLARE P20I%#DECLARE P20L%#DECLARE P20RBRACE%#DECLARE P20OUTPUT$#DECLARE P20TEXT$#DECLARE P21TEXT$TRAP PROC24_HANDLE_ERRORGOSUB PROC22_DEFAULT_COLORS:SCNCLR:PRINT ESC$"4"ESC$"R"ESC$"M";UPPERCASE$GOSUB PROC0_SETUPGOSUB PROC13_WELCOMEDO  GOSUB PROC22_DEFAULT_COLORS  GOSUB PROC1_NEW_GAME  GOSUB PROC18_DRAGNET:SLEEP 6  GOSUB PROC2_MAIN_LOOP ' INVOKE MAIN LOOP  GOSUB PROC14_GAME_OVER  GOSUB FN1_PLAY_AGAIN  IF F1RV% THEN SCNCLR:ELSE GOSUB PROC15_GOODBYE:EXITLOOP.ENDGOSUB PROC22_DEFAULT_COLORS:CURSOR ONPRINT ESC$"L"ESC$"N" ' RESTORE SCROLLING FUNCTIONEND' ::::::::::::::::::::' ::   SETUP GAME   ::' ::::::::::::::::::::' PROC_SETUP().PROC0_SETUPLIT$ = CHR$(BLANK)UNLIT$ = CHR$(HASH)DIM DIFFICULTY_LEVELS%(MAXLEVEL%)DIM LIT_PAD$(NUMPADS%, 2)DIM UNLIT_PAD$(NUMPADS%, 2)DIM PAD%(NUMPADS%, 2)DIM PAD_COLOR%(NUMPADS%)DIM PAD_PITCH$(NUMPADS%)DIM PAD_KEY$(NUMPADS%)SW% = RWINDOW(2)SH% = RWINDOW(3)RESTORE:FOR P0I% = 0 TO MAXLEVEL% - 1:READ DIFFICULTY_LEVELS%(P0I%):NEXT P0I%DATA 8,14,20,31FOR P0I% = 0 TO MAXLEVEL% - 1  READ PAD_COLOR%(P0I%),PAD_PITCH$(P0I%),PAD_KEY$(P0I%),PAD%(P0I%, 0),PAD%(P0I%, 1)  FOR P0J% = 0 TO 1    READ P0N% ' WIDTH    F7COUNT% = P0N%:F7TEXT$ = UNLIT$:GOSUB FN7_RPT$    UNLIT_PAD$(P0I%, P0J%) = F7RV$    F7COUNT% = P0N%:F7TEXT$ = LIT$:GOSUB FN7_RPT$    LIT_PAD$(P0I%, P0J%) = F7RV$  NEXT P0J%NEXT P0I%' PAD_COLOR_VALUE,PAD_PITCH_VALUE,PAD_KEY,PAD_X,PAD_Y,PAD_TOP_WIDTH,PAD_BOTTOM_WIDTHDATA 5,"O5QE","R",0,0,10,5,2,"O5QA","I",11,0,10,5,7,"O5QC#","F",0,7,5,10,6,"O4QE","J",11,7,5,10GOSUB PROC10_HISCORE_READRETURN' ::::::::::::::::::::::' ::     NEW GAME     ::' ::::::::::::::::::::::' PROC_NEW_GAME().PROC1_NEW_GAMELOST% = FALSECURRENTROUND% = 0RCURSOR P7X%, P7Y%GOSUB PROC7_SELECT_DIFFICULTYNUMROUNDS% = DIFFICULTY_LEVELS%(DIFFICULTYLEVEL% - 1)GOSUB PROC3_NEW_SEQUENCESCNCLR:CURSOR OFFGOSUB PROC4_DRAW_PLAYING_FIELDRETURN' ::::::::::::::::::::::' ::     MAIN LOOP    ::' ::::::::::::::::::::::' PROC_MAIN_LOOP().PROC2_MAIN_LOOPP2WON% = FALSEDO  GOSUB PROC12_GET_READY:GOSUB PROC8_DISPLAY_SCORES  FOR P2I% = 0 TO CURRENTROUND% ' PRESENT SEQUENCE REVEALED THUS FAR    P2DELAYTIME% = SDLY - (CURRENTROUND% >= 5) * -SDLY/.06 + (CURRENTROUND% >= 9) * -SDLY/.06 + (CURRENTROUND% >= 13) * -SDLY/.06    P2N% = SEQUENCE%(P2I%)    P5INDEX% = P2N%:P5IS_LIT% = TRUE:P5PAUSE = .2:GOSUB PROC5_PAINT_PAD    P6INDEX% = P2N%:P6DURATION = P2DELAYTIME%:GOSUB PROC6_PAD_SOUND    P5INDEX% = P2N%:P5IS_LIT% = FALSE:P5PAUSE = .2:GOSUB PROC5_PAINT_PAD  NEXT P2I%  P2I% = 0:GOSUB PROC19_EMPTY_KEYBOARD_BUFFER ' CLEAR OUT ANY LINGERING EXTRA PRESSES  DO    P2N% = SEQUENCE%(P2I%)    F0DURATION = PDLY:GOSUB FN0_PAD_PRESS ' GET PAD PRESSED BY PLAYER    P2INDEX% = F0RV%    LOST% = (P2INDEX% = -1) OR (P2INDEX% <> P2N%) ' WRONG PAD PRESS OR NO PAD PRESS DETECTED    P5INDEX% = P2N%:P5IS_LIT% = TRUE:P5PAUSE = .2:GOSUB PROC5_PAINT_PAD ' ILLUMINATE THE CORRECT PAD    P2DELAYTIME% = (LOST%) * -1.5 + (NOT LOST%) * -SDLY    IF LOST% THEN BEGIN      TEMPO 24:PLAY "O1T7WD":SLEEP P2DELAYTIME%    BEND:ELSE BEGIN      P6INDEX% = P2INDEX%:P6DURATION = P2DELAYTIME%:GOSUB PROC6_PAD_SOUND    BEND    P5INDEX% = P2N%:P5IS_LIT% = FALSE:P5PAUSE = .2:GOSUB PROC5_PAINT_PAD ' STOP ILLUMINATING THE PAD    P2I% = P2I% + 1 ' NEXT SIGNAL IN SEQUENCE  LOOP UNTIL LOST% OR (P2I% > CURRENTROUND%)  CURRENTROUND% = CURRENTROUND% + 1  P2WON% = (NOT LOST%) AND (CURRENTROUND% = NUMROUNDS%)  IF NOT LOST% THEN GOSUB PROC9_UPDATE_BEST_SCORELOOP UNTIL P2WON% OR LOST%RETURN' ::::::::::::::::::::::::::::::::' :: GENERATE A RANDOM SEQUENCE ::' ::::::::::::::::::::::::::::::::' PROC_NEW_SEQUENCE().PROC3_NEW_SEQUENCEFOR P3I% = 0 TO NUMROUNDS% - 1  F2LO% = 0:F2HI% = 3:GOSUB FN2_RND_INT  SEQUENCE%(P3I%) = F2RV% NEXT P3I%SEQUENCE%(P3I%) = -1 ' SIGNAL END OF SEQUENCE WITH TERMINATING VALUE OF -1RETURN' ::::::::::::::::::::::::' :: DRAW PLAYING FIELD ::' ::::::::::::::::::::::::' PROC_DRAW_PLAYING_FIELD().PROC4_DRAW_PLAYING_FIELDFOR P4I% = 0 TO 3  P5INDEX% = P4I%:P5IS_LIT% = FALSE:P5PAUSE = 0:GOSUB PROC5_PAINT_PADNEXT P4I%P4OX% = INT(SW% / 2) - 10:P4OY% = INT(SH% / 2) - 10CURSOR 8 + P4OX%, 6 + P4OY%:PRINT WHITE$;GAMENAME$CURSOR 7 + P4OX%, 3 + P4OY%:PRINT PAD_KEY$(0)CURSOR 13 + P4OX%, 3 + P4OY%:PRINT PAD_KEY$(1)CURSOR 7 + P4OX%, 9 + P4OY%:PRINT PAD_KEY$(2)CURSOR 13 + P4OX%, 9 + P4OY%:PRINT PAD_KEY$(3)RETURN' :::::::::::::::::::::::::::::' :: HANDLE PAD PRESS WITHIN ::' :: THE GIVEN TIMEOUT VALUE ::' :::::::::::::::::::::::::::::' FN_PAD_PRESS(DURATION).FN0_PAD_PRESSF0AT = TIDO  GET F0CH$  F0RV% = (F0CH$ = PAD_KEY$(0)) * -1 + (F0CH$ = PAD_KEY$(1)) * -2 + (F0CH$ = PAD_KEY$(2)) * -3 + (F0CH$ = PAD_KEY$(3)) * -4LOOP UNTIL F0RV% <> 0 OR TI - F0AT >= F0DURATIONF0RV% = F0RV% - 1 ' RETURNS -1 IF NO PAD PRESSEDRETURN' ::::::::::::::::::::::' ::    PAINT PAD     ::' ::::::::::::::::::::::' PROC_PAINT_PAD(INDEX%, IS_LIT%, PAUSE).PROC5_PAINT_PADP5FGCOLOR = RCOLOR(1)P5OX% = INT(SW% / 2) - 10:P5OY% = INT(SH% / 2) - 10FOR P5I% = 0 TO 5  P5X% = PAD%(P5INDEX%, 0):P5Y% = PAD%(P5INDEX%, 1) + P5I%  IF P5IS_LIT% THEN P5P$ = LIT_PAD$(P5INDEX%, (P5I% > 2) * -1):ELSE P5P$ = UNLIT_PAD$(P5INDEX%, (P5I% > 2) * -1)  IF (LEN(P5P$) < 10) AND (MOD(P5INDEX%, 2) = 1) THEN P5X% = P5X% + 5  FOREGROUND PAD_COLOR%(P5INDEX%) ' + -8 * (P5IS_LIT% <> 0)  CURSOR P5X% + P5OX%, P5Y% + P5OY%  PRINT RVSON$;P5P$;RVSOFF$NEXT P5I%FOREGROUND P5FGCOLOR ' RESTORE ORIGINAL FOREGROUND COLORSLEEP P5PAUSE RETURN' ::::::::::::::::::::::' ::  PLAY PAD SOUND  ::' ::::::::::::::::::::::' PROC_PAD_SOUND(INDEX%, DURATION).PROC6_PAD_SOUNDP6P$ = PAD_PITCH$(P6INDEX%)TEMPO 17:PLAY P6P$:SLEEP (P6DURATION / .05 + .01) ' 0.05 = DURATION; .01 = SLEEPRETURN' :::::::::::::::::::::::::::::' :: SELECT DIFFICULTY LEVEL ::' :::::::::::::::::::::::::::::' PROC_SELECT_DIFFICULTY(X%, Y%).PROC7_SELECT_DIFFICULTYCURSOR OFFP7TEXT$ = CYAN$+"DIFFICULTY LEVEL (1 TO 4):"DO  F9TEXT$ = P7TEXT$:GOSUB FN9_CENTER  F10X% = F9RV% - 2:F10Y% = P7Y%:F10TEXT$ = P7TEXT$:F10DEFAULT$ = "1"  GOSUB FN10_PROMPT:P7RV$ = F10RV$  P7RV% = VAL(P7RV$)LOOP UNTIL (P7RV% >= 1 AND P7RV% <= 4)DIFFICULTYLEVEL% = P7RV%RETURN' ::::::::::::::::::::::' ::  DISPLAY SCORES  ::' ::::::::::::::::::::::' PROC_DISPLAY_SCORES().PROC8_DISPLAY_SCORESP8SC$ = CYAN$ + "ROUND " + WHITE$ + MID$(STR$(CURRENTROUND% + 1), 2) + "/" + MID$(STR$(NUMROUNDS%), 2)CURSOR 0, 0:PRINT P8SC$GOSUB PROC9_UPDATE_BEST_SCORERETURN' :::::::::::::::::::::::::' ::  UPDATE BEST SCORE  ::' :::::::::::::::::::::::::' PROC_UPDATE_BEST_SCORE().PROC9_UPDATE_BEST_SCORE' CHECK IF BEST SCORE HAS BEEN SURPASSED AND UPDATE IF NEEDEDIF (BESTSCORE% < CURRENTROUND%) THEN BEGIN  BESTSCORE% = CURRENTROUND%  IF NUMROUNDS% > BESTROUNDS% THEN BESTROUNDS% = NUMROUNDS%BENDP9HS$ = RIGHT$("     " + YELLOW$ + "BEST " + WHITE$ + MID$(STR$(BESTSCORE%), 2) + "/" + MID$(STR$(BESTROUNDS%), 2), 12)CURSOR SW% - LEN(P9HS$) + 2, 0:PRINT P9HS$RETURN' :::::::::::::::::::::::' ::  HIGH SCORE READ  ::' :::::::::::::::::::::::' PROC10_HISCORE_READ().PROC10_HISCORE_READP10STATUS% = 0DOPEN#1,(GAMENAME$ + ".HI")IF DS = 0 THEN BEGIN  INPUT#1, P10VAL1%, P10VAL2%BEND:ELSE BEGIN  P10STATUS% = -1BENDDCLOSE#1IF P10STATUS% = 0 THEN BESTSCORE% = P10VAL1%:BESTROUNDS% = P10VAL2%RETURN' ::::::::::::::::::::::::' ::  HIGH SCORE WRITE  ::' ::::::::::::::::::::::::' PROC_HISCORE_WRITE().PROC11_HISCORE_WRITEDOPEN#2,("@" + GAMENAME$ + ".HI"),WPRINT#2, BESTSCORE%:PRINT#2, BESTROUNDS%DCLOSE#2RETURN' ::::::::::::::::::::::::::::::' :: DISPLAY GET READY PROMPT ::' ::::::::::::::::::::::::::::::' PROC_GET_READY().PROC12_GET_READYP12FG% = RCOLOR(1)FOREGROUND YELLOW:CURSOR , 0P20TEXT$ = "GET READY!":GOSUB PROC20_CENTER ' DISPLAY GET READY! MESSAGESLEEP 1.5F7COUNT% = LEN(P20TEXT$):F7TEXT$ = " ":GOSUB FN7_RPT$P20TEXT$ = F7RV$CURSOR , 0:GOSUB PROC20_CENTER ' ERASE GET READY! MESSAGE AFTER ~2 SECONDSFOREGROUND P12FG%RETURN' :::::::::::::::::::' ::    WELCOME    ::' :::::::::::::::::::' PROC_WELCOME().PROC13_WELCOMEP13PAD$ = ""FOR P13I% = 0 TO 3  P13PAD$ = P13PAD$ + " "  P13C% = (RED = PAD_COLOR%(P13I%)) * -28 + (YELLOW = PAD_COLOR%(P13I%)) * -158  P13C% = P13C% + (GREEN = PAD_COLOR%(P13I%)) * -30 + (BLUE = PAD_COLOR%(P13I%)) * -31  P13PAD$ = P13PAD$ + CHR$(P13C%) + PAD_KEY$(P13I%)NEXT P13I%P20TEXT$ = YELLOW$+"NOMIS ONLY MAY IMPERSONATE SIMON":GOSUB PROC20_CENTER:PRINT:PRINTP20TEXT$ = WHITE$+"WELCOME TO "+CYAN$+GAMENAME$+WHITE$+"...":GOSUB PROC20_CENTER:PRINTP20TEXT$ = "A COLORFUL AND MUSICAL GAME":GOSUB PROC20_CENTER:PRINTP20TEXT$ = "OF 'FOLLOW THE LEADER'":GOSUB PROC20_CENTER:PRINT:PRINTP20TEXT$ = WHITE$+RVSON$+"OBJECT OF THE GAME"+RVSOFF$:GOSUB PROC20_CENTER:PRINTP20TEXT$ = "  CORRECTLY REPEAT A LONGER AND":GOSUB PROC20_CENTER:PRINTP20TEXT$ = "LONGER SEQUENCE OF SIGNALS":GOSUB PROC20_CENTER:PRINT:PRINTP20TEXT$ = WHITE$+RVSON$+"CONTROLS"+RVSOFF$:GOSUB PROC20_CENTER:PRINTP20TEXT$ = "THE FOLLOWING KEYS PRESS THE":GOSUB PROC20_CENTER:PRINTP20TEXT$ = "SENSOR PAD OF THE":GOSUB PROC20_CENTER:PRINTP20TEXT$ = "CORRESPONDING COLOR:" + P13PAD$:GOSUB PROC20_CENTER:PRINTFOREGROUND WHITE:PRINTRETURN' :::::::::::::::::' ::  GAME OVER  ::' :::::::::::::::::' PROC_GAME_OVER().PROC14_GAME_OVERIF LOST% THEN BEGIN  P14CO% = RED  P14MSG$ = "SO SORRY! YOU LOST."  GOSUB PROC17_WAH_WAHBEND:ELSE BEGIN  P14CO% = GREEN  P14MSG$ = "CONGRATULATIONS! YOU WON."  GOSUB PROC16_CHARGEBENDFOREGROUND P14CO%:CURSOR 0, INT(SH% / 2) + 4P20TEXT$ = P14MSG$:GOSUB PROC20_CENTERSLEEP 3.5GOSUB PROC11_HISCORE_WRITERETURN' ::::::::::::::::::::::::::::::' :: PLAY ANOTHER GAME PROMPT ::' ::::::::::::::::::::::::::::::' FN_PLAY_AGAIN().FN1_PLAY_AGAINFOREGROUND YELLOWF12TEXT$ = "PLAY AGAIN?"F12X% = INT((SW% - LEN(F12TEXT$) - 6) / 2):RCURSOR , F12Y%:F12Y% = F12Y% + 2GOSUB FN12_SIMPLE_YES_NO_PROMPTF1RV% = F12RV%RETURN' :::::::::::::::::::' ::  SAY GOODBYE  ::' :::::::::::::::::::' PROC_GOODBYE().PROC15_GOODBYECURSOR OFFSCNCLRP21TEXT$ = "SO LONG AND THANK YOU FOR PLAYING..."FOREGROUND YELLOW:GOSUB PROC21_FULL_CENTER_TEXTF9TEXT$ = GAMENAME$:GOSUB FN9_CENTERFOR P15I% = 0 TO F9RV% - 1  F7COUNT% = P15I%:F7TEXT$ = " ":GOSUB FN7_RPT$  CURSOR 0, INT(SH% / 2) + 2:FOREGROUND MOD(P15I%, 7) + 1  PRINT F7RV$;GAMENAME$  SLEEP .2NEXT P15I%RETURN' :::::::::::::::::' ::  CHARGE!!!  ::' :::::::::::::::::.PROC16_CHARGE' g3(S.)c4(S.)e4(S.)g4(I.)e4(I)g4(H)TEMPO 18:PLAY "T7O3.SGO4.SC.SE.IGIEHG"RETURN' :::::::::::::::' ::  WAH-WAH  ::' :::::::::::::::.PROC17_WAH_WAH' g2(I)g2(I)g2(I)e2(WQ)f2(I))f2(I))f2(I)d2(WH)TEMPO 17:PLAY "T7O2IGGG....HEIFFFWD"RETURN' :::::::::::::::' ::  DRAGNET  ::' :::::::::::::::.PROC18_DRAGNET' c3(I.)d3(S)d#3(I)c3(I.)r(Q)c3(I.)d3(S)d#3(I)c3(I)f#3(Q.)TEMPO 7:PLAY "T7O3.ICSDI#D.ICQR.ICSDI#DIC.Q#F"RETURN' :::::::::::::::::::::::::::::::::' :: RANDOM INTEGER WITHIN RANGE ::' :::::::::::::::::::::::::::::::::' FN_RND_INT(F2LO%, F2HI%)' F2LO% = LO VALUE, F2HI% = HI VALUE' RETURNS F2RV% A (NUMBER BETWEEN LO AND HI).FN2_RND_INTF2RV% = INT(RND(1) * (F2HI% - F2LO% + 1)) + F2LO%RETURN' ::::::::::::::::::::::' :: MAXIMUM OF X & Y ::' ::::::::::::::::::::::' FN3_MAX(X, Y).FN3_MAXF3RV = F3Y + (F3X > F3Y) * (F3Y - F3X)RETURN' ::::::::::::::::::::::' :: MINIMUM OF X & Y ::' ::::::::::::::::::::::' FN_MIN(X, Y).FN4_MINF4RV = F4Y + (F4X < F4Y) * (F4Y - F4X)RETURN' ::::::::::::::::::::::::::' ::  BOUNDED TIME TICKS  ::' ::::::::::::::::::::::::::' FN_INT_TIME().FN5_INT_TIMEF5RV = MOD(TI, MAXINT)RETURN' ::::::::::::::::::::::::::::::' :: REPEAT A STRING VALUE A  ::' :: GIVEN AMOUNT OF TIMES    ::' :: AND SAVE TO A NEW STRING ::' ::::::::::::::::::::::::::::::' FN_RPT$(COUNT%, TEXT$).FN7_RPT$F7RV$ = "":FOR F7INDEX% = 1 TO F7COUNT%:F7RV$ = F7RV$ + F7TEXT$:NEXT F7INDEX%RETURN' :::::::::::::::::::::' ::   CENTER TEXT   ::' :::::::::::::::::::::' FN9_CENTER(TEXT$).FN9_CENTERF9RV% = INT((SW% - LEN(F9TEXT$)) / 2)RETURN' :::::::::::::::::::::::::' :: PROMPT FOR RESPONSE ::' :::::::::::::::::::::::::' FN_PROMPT(X%, Y%, TEXT$, DEFAULT$).FN10_PROMPTCURSOR F10X%, F10Y%:PRINT F10TEXT$" "F10DEFAULT$DO:GET F10RV$:LOOP UNTIL F10RV$ <> ""IF F10RV$ = CHR$(13) THEN F10RV$ = F10DEFAULT$CURSOR F10X% + LEN(F10TEXT$), F10Y%:PRINT WHITE$;RVSON$;F10RV$;RVSOFF$:GOSUB PROC23_BEEP:SLEEP .5RETURN' :::::::::::::::::::::::::::::::::' :: ENTER NUMBERS FROM KEYBOARD ::' :::::::::::::::::::::::::::::::::' FN_PROMPT_FOR_NUMBERS(X%, Y%, TEXT$, DEFAULT$, LENGTH%).FN11_PROMPT_FOR_NUMBERSF11RV$ = "":GOSUB PROC19_EMPTY_KEYBOARD_BUFFER:CURSOR ONCURSOR F11X%, F11Y%:PRINT F11TEXT$" "F11DEFAULT$:CURSOR F11X% + LEN(F11TEXT$) + 1, F11Y%DO  GETKEY F11C$  IF (F11C$ = CHR$(20) OR F11C$ = CHR$(157)) AND LEN(F11RV$) > 0 THEN F11RV$ = LEFT$(F11RV$, LEN(F11RV$) - 1):PRINT CHR$(20);  IF (F11C$ >= "0" AND F11C$ <= "9") AND LEN(F11RV$) < F11LENGTH% THEN F11RV$ = F11RV$ + F11C$:PRINT F11C$;  IF F11C$ = CHR$(13) AND LEN(F11RV$) = 0 THEN F11RV$ = F11DEFAULT$LOOP UNTIL (F11C$ = CHR$(13) AND LEN(F11RV$) <= F11LENGTH%)CURSOR OFFRETURN' ::::::::::::::::::::::::::::::::' :: ENTER Y OR N FROM KEYBOARD ::' ::::::::::::::::::::::::::::::::' FN_SIMPLE_YES_NO_PROMPT(X%, Y%, TEXT$).FN12_SIMPLE_YES_NO_PROMPTGOSUB PROC19_EMPTY_KEYBOARD_BUFFERF12TEXT$ = F12TEXT$ + " (Y/N)"CURSOR F12X%, F12Y%:PRINT F12TEXT$" ";DO:GETKEY F12KEY$:LOOP UNTIL INSTR(F12CHARS$, F12KEY$) > 0CURSOR F12X% + LEN(F12TEXT$) + 1, F12Y%:PRINT WHITE$;RVSON$;F12KEY$;RVSOFF$:GOSUB PROC23_BEEP:SLEEP .5F12RV% = ("Y" = F12KEY$)RETURN' :::::::::::::::::::::::::::' :: EMPTY KEYBOARD BUFFER ::' :::::::::::::::::::::::::::' PROC_EMPTY_KEYBOARD_BUFFER().PROC19_EMPTY_KEYBOARD_BUFFERDO:GET P19A%:LOOP UNTIL P19A% = 0RETURN' :::::::::::::::::::::::::::::' ::  DISPLAY CENTERED TEXT  ::' :::::::::::::::::::::::::::::' PROC_CENTER(TEXT$).PROC20_CENTERP20L% = LEN(P20TEXT$):P20RBRACE% = ASC("]"):P20OUTPUT$ = ""FOR P20I% = 1 TO P20L%  P20CH$ = MID$(P20TEXT$, P20I%, 1):P20CH% = ASC(P20CH$)  IF (P20CH% >= BLANK AND P20CH% <= P20RBRACE%) THEN P20OUTPUT$ = P20OUTPUT$ + P20CH$NEXT P20I%F9TEXT$ = P20OUTPUT$:GOSUB FN9_CENTERCURSOR F9RV%:PRINT P20TEXT$;RETURN' :::::::::::::::::::::::::::::::::' :: CENTER TEXT BOTH VERTICALLY ::' :: AND HORIZONTALLY            ::' :::::::::::::::::::::::::::::::::' PROC_FULL_CENTER_TEXT(TEXT$).PROC21_FULL_CENTER_TEXTF9TEXT$ = P21TEXT$:GOSUB FN9_CENTERCURSOR F9RV%, INT(SH% / 2):PRINT P21TEXT$;RETURN' ::::::::::::::::::::::::::::' :: RESTORE DEFAULT COLORS ::' ::::::::::::::::::::::::::::' PROC_DEFAULT_COLORS().PROC22_DEFAULT_COLORSBORDER DARKGREY:BACKGROUND BLACK:FOREGROUND WHITERETURN' ::::::::::' :: BEEP ::' ::::::::::' PROC_BEEP().PROC23_BEEPTEMPO 24:PLAY "O4T5SB"RETURN' ::::::::::::::::::::::::::::::' ::  ERROR HANDLING ROUTINE  ::' ::::::::::::::::::::::::::::::' PROC_HANDLE_ERROR().PROC24_HANDLE_ERRORIF ER <> 30 THEN BEGIN  GOSUB PROC22_DEFAULT_COLORS:CURSOR ON:PRINT ESC$"L"ESC$"N"  PRINT RED$;ERR$(ER)" ERROR "WHITE$"@LINE #"EL  STOPBENDRESUME